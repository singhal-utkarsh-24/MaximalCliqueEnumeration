#include <bits/stdc++.h>
#include <omp.h>
using namespace std;
class Graph {
private:
    int n;
    vector<unordered_set<int>> adj; // Adjacency list for O(1) lookup
public:
    Graph(int n) : n(n), adj(n) {} // Constructor
    void addEdge(int u, int v) { // Add both directions to make input graph undirected
        adj[u].insert(v);
        adj[v].insert(u);
    }
    vector<int> degeneracy() const { // Compute degeneracy ordering of vertices in O(n+m)
        vector<int> ordering;
        vector<unordered_set<int>> rem = adj; // copy operation once
        vector<bool> done(n, false);
        for (int i = 0 ; i < n ; i++) {
            int min_deg = INT_MAX;
            int min_ver = -1;
            for (int v = 0 ; v < n ; v++) {
                if ((rem[v].size() < min_deg) && !done[v]) {
                    min_deg = rem[v].size();
                    min_ver = v;
                }
            }
            ordering.push_back(min_ver);
            done[min_ver] = true;
            for (int near : rem[min_ver]) { // Remove the added vertex from its neighbors' adj sets
                if (!done[near]) {
                    rem[near].erase(min_ver);
                }
            }
        }
        reverse(ordering.begin(), ordering.end()); // Above construction is reversed so put it back in order
        return ordering;
    }
    const unordered_set<int>& get_neigh(int v) const { return adj[v]; } // Returns neighbors of a vertex.
    int size() const { return n; } // Returns size of graph
};
class BronKerbosch_Cliquer {
private:
    const Graph &graph;
    vector<int> ordering;
    // Global variables to store req results
    int totalCliques = 0;
    int maxCliqueSize = 0;
    map<int, int> cliqueSizes; // Map with key as clique size and value as count for O(n)
    // In-place recursive BronKerbosch with pivoting: P and X are candidate vertex sets, R is the current clique being constructed
    // Local counter variables (loc_tot_cliques, loc_max_size, loc_size_dist) passed by reference so the recursion calls add results into caller's TLS
    void BronKerboschDegeneracy(vector<int> &R, vector<int> &P, vector<int> &X, int &loc_tot_cliques, int &loc_max_size, map<int,int> &loc_size_dist) const {
        if (P.empty() && X.empty()) {
            int curr_size = R.size();
            loc_tot_cliques++;
            loc_max_size = max(loc_max_size, curr_size);
            loc_size_dist[curr_size]++;
            return;
        }
        // Choose pivot u from (P ∪ X) that maximizes no of elements in (P ∩ N(u))
        int pivot = -1, max_ele = -1;
        for (int u : P) {
            int c = 0;
            const auto &neigh = graph.get_neigh(u);
            for (int w : P) {
                if (neigh.find(w) != neigh.end()) {
                    c++;
                }
            }
            if (c > max_ele) {
                pivot = u;
                max_ele = c;
            }
        }
        for (int u : X) {
            int c = 0;
            const auto &neigh = graph.get_neigh(u);
            for (int w : P) {
                if (neigh.find(w) != neigh.end()) {
                    c++;
                }
            }
            if (c > max_ele) {
                pivot = u;
                max_ele = c;
            }
        }
        const auto &piv_neigh = graph.get_neigh(pivot);
        // Process candidates (vertices in P that aren't neighbors of pivot)
        int i = 0;
        int p = (int)P.size();
        while (i < p) {
            int v = P[i];
            if (piv_neigh.find(v) != piv_neigh.end()) { // Skip if it is neighbor
                i++;
                continue;
            }
            // Find new candidate set for v
            const auto &v_neigh = graph.get_neigh(v);
            vector<int> P_new;
            P_new.reserve(p);
            for (int w : P) {
                if (v_neigh.find(w) != v_neigh.end()) {
                    P_new.push_back(w);
                }
            }
            vector<int> X_new;
            X_new.reserve(X.size());
            for (int w : X) {
                if (v_neigh.find(w) != v_neigh.end())
                    X_new.push_back(w);
            }
            R.push_back(v);
            BronKerboschDegeneracy(R, P_new, X_new, loc_tot_cliques, loc_max_size, loc_size_dist);
            R.pop_back();
            P[i] = P.back(); // Swap last ele with v
            P.pop_back(); // Remove v
            X.push_back(v); // Add v to X
            // No need to increment i as P[i] now has a new element.
        }
    }
public:
    BronKerbosch_Cliquer(const Graph &g) : graph(g) {
        ordering = graph.degeneracy();
    }
    void count_max_cliques() {
        int n = graph.size();
        // Global variables from TLS
        int glo_tot_cliques = 0;
        int glo_max_size = 0;
        map<int,int> glo_size_dist;
        // Parallelize outer loop using OpenMP
        #pragma omp parallel
        {
            int loc_tot_cliques = 0;
            int loc_max_size = 0;
            map<int,int> loc_size_dist;
            // Outer loop: each vertex (in degeneracy order) processed independently
            #pragma omp for schedule(dynamic)
            for (int i = 0 ; i < n ; i++) {
                int v = ordering[i];
                const auto &neigh = graph.get_neigh(v);
                // Candidate set P - later neighbors in degeneracy ordering
                vector<int> P;
                for (int j = i + 1 ; j < n ; j++) {
                    int later_v = ordering[j];
                    if (neigh.find(later_v) != neigh.end()) {
                        P.push_back(later_v);
                    }
                }
                // Excluded set X - earlier neighbors in degeneracy ordering.
                vector<int> X;
                for (int j = 0 ; j < i ; j++) {
                    int earlier_v = ordering[j];
                    if (neigh.find(earlier_v) != neigh.end()) {
                        X.push_back(earlier_v);
                    }
                }
                vector<int> R;
                R.push_back(v);
                BronKerboschDegeneracy(R, P, X, loc_tot_cliques, loc_max_size, loc_size_dist);
            }
            // Combine thread results into global
            #pragma omp critical 
            {
                glo_tot_cliques += loc_tot_cliques;
                glo_max_size = max(glo_max_size, loc_max_size);
                for (auto &entry : loc_size_dist) {
                    glo_size_dist[entry.first] += entry.second;
                }
            }
        }
        // Save global results
        totalCliques = glo_tot_cliques;
        maxCliqueSize = glo_max_size;
        cliqueSizes = glo_size_dist;
    }
    int get_max_size() const {return maxCliqueSize;}
    int get_tot_cliques() const {return totalCliques;}
    const map<int, int>& get_size_dist() const {return cliqueSizes;}
};
int main(int argc, char* argv[]) {
    if (argc != 2) {
        cerr << "Please use './executable_name input.txt' for executing" << endl;
        return 1;
    }
    ifstream inputFile(argv[1]);
    if (!inputFile) {
        cerr << "Could not open file " << endl;
        return 1;
    }
    int n, m;
    inputFile >> n >> m;
    Graph graph(n);
    for (int i = 0 ; i < m ; ++i) {
        int u, v;
        inputFile >> u >> v;
        u--; v--; // 0-based indices.
        if (u < 0 || u >= n || v < 0 || v >= n)
            continue;
        graph.addEdge(u, v);
    }
    BronKerbosch_Cliquer counter(graph);
    auto start = chrono::high_resolution_clock::now();
    counter.count_max_cliques();
    auto end = chrono::high_resolution_clock::now();
    chrono::duration<double> elapsed = end - start;
    cout << "1. Largest clique size: " << counter.get_max_size() << endl;
    cout << "2. Total no of maximal cliques: " << counter.get_tot_cliques() << endl;
    cout << "3. Execution time: " << elapsed.count() << " seconds" << endl;
    cout << "4. Distribution of clique sizes:" << endl;
    for (auto it = counter.get_size_dist().begin() ; it != counter.get_size_dist().end() ; ++it) {
        cout << "  Size " << it->first << ": " << it->second << " cliques" << endl;
    }
    return 0;
}